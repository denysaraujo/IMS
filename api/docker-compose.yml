services:
  db:
    image: postgres:15
    container_name: postgres_db
    env_file: .env
    environment:
      - POSTGRES_USER=${SPRING_DATASOURCE_USERNAME}
      - POSTGRES_PASSWORD=${SPRING_DATASOURCE_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - api_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${SPRING_DATASOURCE_USERNAME} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: spring_api   
    env_file: .env 
    environment:
      # Spring Config
      - SPRING_PROFILES_ACTIVE=docker
      - SERVER_PORT=${SERVER_PORT}
      
      # PostgreSQL Config
      - SPRING_DATASOURCE_URL=${SPRING_DATASOURCE_URL}
      - SPRING_DATASOURCE_USERNAME=${SPRING_DATASOURCE_USERNAME}
      - SPRING_DATASOURCE_PASSWORD=${SPRING_DATASOURCE_PASSWORD}
      
      # JWT Config
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRATION_MS=${JWT_EXPIRATION_MS}
      
      # CORS Config
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
      - CORS_ALLOWED_METHODS=${CORS_ALLOWED_METHODS}   
    ports:
      - "${SERVER_PORT}:${SERVER_PORT}" 
    depends_on:
      db:
        condition: service_healthy
    networks:
      - api_network  

volumes:
  postgres_data:

networks:
  api_network:
    driver: bridge